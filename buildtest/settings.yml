# list root of module tree where modules are installed. Specify multiple module tree as a list
BUILDTEST_MODULEPATH: []

# editor of choice when viewing files
# valid options: vim, emacs, nano
EDITOR: vim

build:
  # directory where test scripts will be generated
  testdir: $HOME/.buildtest/testdir

  module:
    # purge modules at start of each script
    purge:
      # set force: True to purge sticky modules (module --force purge)
      force: False

module:
  # control how Lmod spider is parsed
  # Valid values are: [current, all]
  # current: retrieve modules whose abspath is a sub-directory of a module root defined in BUILDTEST_MODULEPATH
  # all: retrieve all records from spider (default output from spider)
  spider_view: current
  # control behavior for listing modules (buildtest module list)
  list:
    # exclude_version_files: yes - will not add .version, .modulerc, or .modulerc.lua files in output. Setting this to "no" will
    # let buildtest add these files and will be present in output
    exclude_version_files: yes
    filter:
      # list of modules to include in output. For instance if you want to restrict search for modules "GCC", "intel" then
      # specify the following
      # include:
        # - GCC
        # - intel
      include: []
    # querylimit controls number of entries displayed with output. A non-negative value means all entries will be displayed
    querylimit: -1

  # control behavior for module load testing (buildtest module loadtest)
  loadtest:
    # run each module load in a login shell. Otherwise will use run command in sub-shell.
    # invoking command in a login shell can take a considerable time when testing module loadtest
    login: no
    # if purge_modules: yes - Then "module purge" will be executed before loading modules
    purge_modules: yes
    # number of module load test to run before exiting. Setting to non-negative value will result in all modules to be tested
    numtest: -1
