$ buildtest schema -n script-v1.0.schema.json -e 
File: /Users/siddiq90/Documents/buildtest/buildtest/schemas/examples/script-v1.0.schema.json/valid/examples.yml
 Valid State: True
 ________________________________________________________________________________
 version: "1.0"
 buildspecs:
   multiline_run:
     executor: local.bash
     type: script
     description: multiline run command
     run: |
       echo "1"
       echo "2"
   single_command_run:
     executor: local.bash
     type: script
     description: single command as a string for run command
     run: "hostname"
   declare_env:
     executor: local.bash
     type: script
     description: declaring environment variables
     env:
       FOO: BAR
       X: 1
     run: |
       echo $FOO
       echo $X
   declare_vars:
     executor: local.bash
     type: script
     description: declaring variables
     vars:
       First: Bob
       Last:  Bill
     run: |
       echo "First:" $First
       echo "Last:" $Last
   declare_shell_sh:
     executor: local.sh
     type: script
     description: declare shell name to sh
     shell: sh
     run: hostname
   declare_shell_bash:
     executor: local.bash
     type: script
     description: declare shell name to bash
     shell: bash
     run: hostname
   declare_shell_python:
     executor: local.python
     type: script
     description: declare shell name to python
     shell: python
     run: |
       print("Hello World")
   declare_shell_bin_bash:
     executor: local.bash
     type: script
     description: declare shell name to /bin/bash
     shell: "/bin/bash -e"
     run: hostname
   declare_shell_name_bin_sh:
     executor: local.script
     type: script
     description: declare shell name to /bin/sh
     shell: "/bin/sh -e"
     run: hostname
   declare_shell_opts:
     executor: local.sh
     type: script
     description: declare shell name to sh
     shell: "sh -e"
     run: hostname
   declare_shebang:
     executor: local.bash
     type: script
     description: declare shell name to sh
     shebang: "#!/usr/bin/env bash"
     run: hostname
   status_returncode:
     executor: local.bash
     type: script
     description: This test pass because using a valid return code
     run: hostname
     status:
       returncode: 0
   status_regex:
     executor: local.bash
     type: script
     description: This test pass with a regular expression status check
     run: hostname
     status:
       regex:
         stream: stdout
         exp: "^$"
   status_regex_returncode:
     executor: local.bash
     type: script
     description: This test fails because returncode and regex specified
     run: hostname
     status:
       returncode: 0
       regex:
         stream: stdout
         exp: "^hello"
   sbatch_example:
     type: script
     executor: local.bash
     description: This test pass sbatch options in test.
     sbatch:
       - "-t 10:00:00"
       - "-p normal"
       - "-N 1"
       - "-n 8"
     run: hostname
   skip_example:
     type: script
     executor: local.bash
     description: this test is skip
     skip: true
     run: hostname
   tag_example:
     type: script
     executor: local.bash
     description: This is a tag example
     sbatch:
       - "-t 10:00:00"
       - "-p normal"
       - "-N 1"
       - "-n 8"
     tags: [slurm]
     run: hostname
 File: /Users/siddiq90/Documents/buildtest/buildtest/schemas/examples/script-v1.0.schema.json/invalid/examples.yml
 Valid State: FAIL
 ________________________________________________________________________________
 version: "1.0"
 buildspecs:
   invalid_test_name_&!@#$%:
     type: script
     executor: local.bash
     description: "invalid test name"
   invalid_bash:
     type: script
     executor: local.bash
     shell: "bash-missing-run"
   missing_run_key:
     type: script
     executor: local.bash
     description: invalid key name roon, missing run key
     roon: |
         systemctl is-active slurmd
         systemctl is-enabled slurmd | grep enabled
   invalid_env_type:
     type: script
     executor: local.bash
     description: env key should be a dictionary
     env:
       - FOO=BAR
     run: echo $FOO
   invalid_vars_type:
     type: script
     executor: local.bash
     description: var key should be a dictionary
     vars:
       - FOO=BAR
     run: echo $FOO
   invalid_description:
     type: script
     executor: local.bash
     description:
       - "Multi Line description"
       - "is not accepted"
   invalid_regex_stream:
     type: script
     executor: local.bash
     description: This test fails because of invalid regex stream
     run: hostname
     status:
       regex:
         stream: file
         exp: "world$"
   missing_regex_exp:
     type: script
     executor: local.bash
     description: This test fails because of missing key 'exp' in regex
     run: hostname
     status:
       regex:
         stream: stdout
   invalid_returncode_type:
     type: script
     executor: local.bash
     description: This test fails because of invalid return code type
     run: hostname
     status:
       returncode: ["1"]
   invalid_shell_usr_bin_bash:
     type: script
     executor: local.bash
     description: invalid shell name, since we only support 'sh', 'bash', 'python' '/bin/bash' /bin/sh
     shell: /usr/bin/bash
     run: hostname
   invalid_shell_type:
     type: script
     executor: local.bash
     description: invalid shell type must be a string
     shell: ["/bin/bash"]
     run: hostname
   invalid_type_shell_shebang:
     type: script
     executor: local.bash
     description: invalid type for shell shebang, must be a string
     shebang: ["#!/bin/bash"]
     run: hostname
   invalid_skip_value:
     type: script
     executor: local.bash
     description: invalid value for skip, must be boolean
     skip: 1
     run: hostname
   invalid_tags_value:
     type: script
     executor: local.bash
     description: invalid tag value must be all string items
     tags: ["compiler", 400 ]
     run: hostname
   additionalProperties_test:
     type: script
     executor: local.bash
     description: additional properties are not allowed so any invalid key/value pair will result in error
     FOO: BAR
     run: hostname
 ________________________________________ Validation Error ________________________________________
 'invalid_test_name_&!@#$%' does not match '^[A-Za-z_][A-Za-z0-9_]*$'
 Failed validating 'pattern' in schema['properties']['buildspecs']['propertyNames']:
     {'pattern': '^[A-Za-z_][A-Za-z0-9_]*$'}
 On instance['buildspecs']:
     'invalid_test_name_&!@#$%'
